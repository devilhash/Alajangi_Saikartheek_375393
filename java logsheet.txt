8/1/2024(FriDay)
Structure Of  Java Program : 
           In Java we have to write the code in a class.And a class consists of data members and behavior members.
Data_members :  data members are used to store data that we are using in the program.They can store different types of data i.e integer,  character , object etc.
   Mainly there a two data types 
Primitive data types : these data types can hold only a single value.
  Ex  : int , char ,boolean , float , etc.
Derived data types :  These data types are able to store multiple values. Basically these data types are derived from primitive data types sometimes from derived data types.
  Ex  : class , array , stack , object etc.

Behavior members : Behavior members define the behavior or logic in the program. We use methods  to define the behavior in java.



4/1/2024(ThursDay)
Assignment : write a java program to perform Arithmetic operations.



Assignment : write a java program to describe data types in java.




3/1/2024(WednesDay)
JAVA : 
JAVA was created in 1995 by sun microsystems. Now it is  owned by ORACLE.
It is an object oriented programming language.
It is a platform independent language. It follows WORA (Write Once Run Anywhere). As it is both a compiled and interpreted language.
It is more secure as it follows oops principle.

JRE(JAVA RUNTIME ENVIRONMENT) :
Java Runtime Environment is a software that is used to run java programs correctly. It is an underlying technology between java program and operating system. It translates and facilitates, providing the resource so that once you write the java application it can run on any operating system without any further modification.

JDK(JAVA DEVELOPMENT KIT) : 
Java development kit is a collection of software tools to run java applications. 




2/1/2024(TuesDay)
Getting data from two different tables :  
We can get data from two tables. We can use alias to get columns from two different tables.

Ex : select a.name, b. Name from student as a, staff as b;

One to One Relation : 
In this one record in first table will be linked with zero or one record in the second table.


One to Many Relation : 
In this relation one record from first table will be linked with zero or more records in the second table.
 


31/12/2023(SunDay)
Coding 3 :Container with Most Water
 class Solution {
    public int maxArea(int[] height) {
        int left = 0 ;
        int right = height.length-1;
        int maxArea = 0;
        while(left<right){
            int area = Math.min(height[left],height[right])*(right-left);
            maxArea = Math.max(area,maxArea);

            if(height[left]<height[right]){
                left++;
            }
            else{
                right--;
            }
        }
         return maxArea;
    }
}



30/12/2023(SaturDay)
Coding 2 :Roman TO Integers

class Solution {
    public int romanToInt(String s) {
     int [] intArr =  new int[s.length()];
               for(int i = 0 ; i < s.length() ; i++){
                   if(s.charAt(i)=='I'){
                       intArr[i] = 1;
                   }
                   else if(s.charAt(i)=='V'){
                       intArr[i] = 5;
                   }
                   else if(s.charAt(i)=='X'){
                       intArr[i] = 10;
                   }
                   else if(s.charAt(i)=='L'){
                       intArr[i] = 50;
                   }
                   else if(s.charAt(i)=='C'){
                       intArr[i] = 100;
                   }
                   else if(s.charAt(i)=='D'){
                       intArr[i] = 500;
                   }
                   else if(s.charAt(i)=='M'){
                       intArr[i] = 1000;
                   }
                   else{
                       System.out.println("Enter a valid Roman Character");
                   }
               }
               int res = intArr[intArr.length-1];
               for(int i = intArr.length-2; i >= 0 ; i--){
                   if( intArr[i] >= intArr[i+1] ){
                     res += intArr[i];
                       
                           
                     }
                    else if( intArr[i] < intArr[i+1] ){
                     res = res - intArr[i];
                     }
                     else{
                         
                           System.out.println("not valid");
                           
                        }
               }
               return res;
        
    }
}

Q1.Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

Ans.  select distinct CITY from STATION WHERE left(city,1) in('a','e','i','o','u');

Q2.Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

Ans.  select distinct CITY from STATION WHERE right(city,1) in('a','e','i','o','u');

Q3.Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Ans.   select distinct CITY from STATION where left(CITY,1) in ('a','e','i','o','u') and right(CITY,1) in ('a','e','i','o','u') ;

Q4.Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

Ans. select distinct CITY from STATION where left(CITY,1) not in ('a','e','i','o','u');

Q5.Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
Ans. select distinct CITY from STATION where right(CITY,1) not in ('a','e','i','o','u');

Q6.Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

Ans. select distinct CITY from STATION where left(CITY,1) not in ('a','e','i','o','u') or right(CITY,1) not in ('a','e','i','o','u');

Q7.Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

Ans . select distinct CITY from STATION where right(CITY,1) not in ('a','e','i','o','u') and left(CITY,1) not in ('a','e','i','o','u');

Q8.Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

Ans.  select NAME FROM STUDENTS where MARKS > 75 ORDER BY RIGHT(NAME,3), ID ;





29/12/2023(FriDay)
CONSTRAINTS : 
Constraint is nothing but a restriction on data . Constraint is specified when the table is created using create keyword or after creating the table using alter keyword.

Syntax :  create table table_name(
                                                    Column_name  datatype constraint,
                                                    Column_name  datatype constraint,
                                                    Column_name  datatype constraint,....
                                                   );
NOT NULL : Ensures that a column cannot have a NULL value.
UNIQUE     : Ensures that all values in a column are different.
PRIMARY KEY : A combination of NOT NULL and UNIQUE. Uniquely identifies each row in a table.
FOREIGN KEY : Prevents actions that would destroy links between tables.
CHECK  : Ensures that the values in a column satisfies a specific condition.
DEFAULT : Sets a default value for a column if no value is specified.

INSERT INTO : 
Insert into is  a statement used to insert new records in the table. There are two ways to insert records into the table

1.specifying both column names and values to be inserted.
Syntax : INSERT INTO table_name (column1, column2, column3, ...)
              VALUES (value1, value2, value3, ...);

2.If you add the all values for all the columns you don't have to specify column names but make sure the values are in the same  order as columns in the table.

Ex : INSERT INTO table_name
      VALUES (value1, value2, value3, ...);



28/12/2023(ThursDay)

HAVING CLAUSE : 
We can't use where clause to check conditions with aggregate functions . To overcome this we use the Having clause to check conditions within the aggregate functions.

Syntax : 
       SELECT column_name(s)
       FROM table_name
       WHERE condition
       GROUP BY column_name(s)
      HAVING condition
      ORDER BY column_name(s);

EXISTS : 
Exists operator checks the existence of a record in a subquery.
It returns TRUE   if the subquery returns one or more than one record.

Syntax : select column_name(s)
               From table_name
               Where exists
               (select column_name(s) from table_name where condition);

ANY : 
If the condition will be true if the operation is true for any of the values in the range.

Syntax : select  column_name(s) 
               From table_name
              Where  column_name operator any(select column_name(s) from table_name  where                    
              condition);

ALL : 
If the condition will be true if the operation is true for all of the values in the range.

Syntax : select  column_name(s) 
               From table_name
              Where  column_name operator all(select column_name(s) from table_name  where                    
              condition);

CREATE : 
Create statement is used to  create a database or a table .

Syntax for creating a database : create database database_name;
Syntax for creating a table :  create table table_name(
                                                    Column_name  datatype constraint,
                                                    Column_name  datatype constraint,
                                                    Column_name  datatype constraint,....
                                                   );

Ex : create table sample{
        Name varchar(10) NOT NULL,
          Id      INT
      }

DROP DATABASE : 
Drop database is used to delete the database.

Syntax : drop database databasae_name;
Ex : drop database tmf;

DROP TABLE: 
Drop database is used to delete the database.

Syntax : drop  table table_name;
Ex : drop table tmf;

ALTER : 
Alter keyword is used to add , delete , and modify the existing table and it is also used to add or drop constraints on the data in an existing table.

Syntax : alter table table_name

ADD : 
Add keyword is used to add a column in an existing table and add a constraint to an existing table.

Syntax : alter table table_name
               Add column_name data_type;


RENAME : 
Rename keyword is used to change the column name in the existing table.

Syntax : alter table table_name
               Rename column old_name to new_name;


MODIFY: 
MODIFY keyword is used to change the data_type of a column  in the existing table.

Syntax : alter table table_name
              Modify column_name data_type;










27/12/2023(WednesDay)
COUNT() :   
Count function returns the number of rows that matches a specific criterion.

Syntax : select count(column_name) from table_name 
               where condition;

Ex :  select count(students) from college where marks>50;

SUM() : 
sum() function returns the total sum of the numeric column.

Syntax : select sum(column_name) from table_name 
               where condition;

Ex :  select  sum(marks) from college ;

AVG() : 
avg() function returns the average value of the numeric column.

Syntax : select avg(column_name) from table_name 
               where condition;

Ex :  select  avg(marks) from college ;

MAX() : 
max() function returns the maximum value in the numeric column.

Syntax : select max(column_name) from table_name ;

Ex :  select  max(marks) from college ;

GROUP BY() : 
Group by() statement is used to group rows with the same values into summary  rows.
Syntax :   SELECT column_name(s)
                 FROM table_name
                WHERE condition
                GROUP BY column_name(s)
                ORDER BY column_name(s);



Min() : 
min() function returns the minimum value in the numeric column.

Syntax : select min(column_name) from table_name ;

Ex :  select  min(marks) from college ;







26/12/2023(TuesDay)
 Date data_types in SQl : 
My sql provides the following data types for storing the date .

Date : format YYYY-MM-DD
DateTime : format YYYY-MM-DD HH:MI:SS
TimeStamp :  format YYYY-MM-DD HH:MI:SS
Year : YYYY or YY

 STR_TO_DATE() Function:
It returns data based on the given string and the format that we have specified.

Syntax :  STR_TO_DATE(string , format);

Ex : STR_TO_DATE( “August-10-2017 “  , “ %M-%d-%Y );

List of format Specifiers : 
YYYY - year with century
YY      - year without century
MM     - month with two digit number
MMM  - Abbreviated month
MMMM - full month name
dd        - day
%H      - 0 to 23 hours
%h       - 00 to 12 hours
%I        - 0 to 12 hours
%T       - time in 24 hours format
%r        - time in 0 to 12 hours AM or PM format
%m     - month name as numeric value
%k      -  0 to 23 hours
%p      -  AM or PM
%c      -  numeric month name
%b    - Abbreviated month
%f      - microseconds (000000 to 999999)

 Date_diff() : 
It returns the difference between two dates in days.

Syntax : date_diff(date1,date2);

Ex : date_ diff (“2023-11-12”,”2023-12-12”)

  Time_diff() : 
It returns the difference between two datetimes in HH:MI:SS format..

Syntax : time_diff(datetime1,datetime2);

Ex : time_ diff (“2023-11-12 12:22:34”,”2023-12-12  13:22:34”)



25/12/2023(MonDay)
Coding 1 : Palindrome Number or Not


    class Solution {
    public boolean isPalindrome(int x) {
        if(x < 0 ){
            return false;
        }
        int res = 0;
        int org = x;
        while(x!=0){
            int rem = x%10;
            res  = res*10+rem;
            x = x/10;
        }
         System.out.println(res);
        if(org == res){
            return true;
        }
        else{
            return false;
        }
        
        
    }
}


22/12/2023(FriDay)
Operators in the WHERE clause : 
           “ < “  : Less than
          “ > “   : Greater than
          “ <= “ : less than or equal to
          “ >= “ : greater than or equal to
          “ = “   : equal to
          “ <> “ : not equal to
“ between “ : It use when we want to filter data  between a certain range.
                           Ex : select * from customers where customerId between 1 and 8;
      “ Like “  : It filters data based on a check pattern.we have to specify a check pattern using                             placeholders.
                          “%” : used to specify an unknown number of characters.
                           “_”  : used to specify a single character.
                           Ex : select * from customers where country like ‘%y’;
           “ IN” :  It is used to specify possible values.
                           Ex : select * from customers where customerId in(1,4,3,6);


AND : 
It is a logical operator used when we perform more than one condition to check in a where clause. It returns records which satisfy all the conditions given in the where clause separated by and operator.

Ex : select * from customers where customerId <8 and country = “germany”;

OR : 
It is a logical operator used when we perform more than one condition to check in a where clause. It returns records which satisfies only one condition given in the where clause separated by or operator.

Ex : select * from customers where customerId <8 or country = “germany”;

In sql a record is not checked  multiple times for the same condition .
ORDER BY : 
It used to sort the results in Ascending order or Descending order.

Ex : select * from Customers order by customerId ;

By default it sorts in Ascending order. If u sort in descending order we use DESC keyword.For Ascending order we use ASC.




21/12/2023(ThursDay)
SELECT Statement :  
Select statement is used to select data from the database.
Syntax : SELECT  (column1,column2,...)
               FROM ( table_name);
Example : select customer_name from customers;

Note: If you want to return all columns without specifying the column names we can use “ * “ .
     Ex: select * from customers;

DISTINCT Statement : 
Distinct statement is used to select only unique records in the column. If we use a distinct  keyword it only returns unique records in that column and ignores the duplicate values.

Syntax : SELECT  DISTINCT( column1,column2,...)
               FROM  (table_name);

Example : select distinct customer_name from customers;


WHERE Clause : 
Where clause is used to filter records in the database. Using where clause we can filter data based on the requirements.

Syntax : SELECT  DISTINCT (column1,column2,...)
               FROM  (table_name) WHERE ( condition);

Example : select distinct customer_name from customers where country = “Germany”;

Note : We have to enclose single/double quotations for text values and we don’t have to enclose any quotations.





20/12/2023(WednesDay)
What is DDL?
          Data Definition Language is used to create and modify the structure of the object in the database   
          Using a predefined command and Syntax.These object can  be tables,sequences,locations and                   
          Aliases.
          Ex: 1.creating a table
                2.Altering a table
                3.deleting a table or a record in the table
What is DML?
Data manipulation Language is used to manipulate the data in the data objects using predefined command followed by a specific syntax.

Ex: Fetching the data from the database.

19/12/2023(TuesDay)
What is a Database Management System(DBMS)?
DBMS is a software used to create and manage databases. It helps users to create , protect , read , retrieve ,delete data in the database.

What is SQL ? 
SQL(structured Query Language) is a computer language that is used to interact with relational databases(RDBMS).SQL is a tool which allows organizing , managing and retrieving data from the computer database.
When a user wants to retrieve data from RDBMS Sql requests the DBMS and DBMS processes the query and shows the data.

What is RDBMS? 
RDBMS stands for Relational Database Management System . Is a type of DBMS that stores data in the form of rows and columns. In RDBMS columns are referred as Attributes and rows are referred as records. 


 






